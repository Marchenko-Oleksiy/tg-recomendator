from aiogram import types, Router, F
from aiogram import exceptions
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging
from utils import db, get_genres, discover_by_genre
from keyboards import categories_inline_keyboard, genres_inline_keyboard, media_list_keyboard
from utils.constants import *

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
categories_router = Router()

@categories_router.message(Command(commands=[CATEGORIES_COMMAND]))
async def cmd_categories(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /categories"""
    categories = db.get_categories()
    
    if not categories:
        await message.answer("–ù–∞ –∂–∞–ª—å, –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=categories_inline_keyboard(categories)
    )

@categories_router.message(F.text == "üé¨ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
async def text_categories(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    await cmd_categories(message)

@categories_router.callback_query(lambda c: c.data.startswith("category_"))
async def callback_category_selected(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    await callback_query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –¥–∞–Ω–∏—Ö callback_query
    category_id = int(callback_query.data.split("_")[1])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∂–∞–Ω—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    genres = db.get_genres(category_id)
    
    # –Ø–∫—â–æ –∂–∞–Ω—Ä—ñ–≤ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ, –æ—Ç—Ä–∏–º—É—î–º–æ –∑ API
    if not genres:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ API
        if category_id == 1:  # –§—ñ–ª—å–º–∏
            media_type = MOVIE
        elif category_id == 2:  # –°–µ—Ä—ñ–∞–ª–∏
            media_type = TV
        elif category_id == 3:  # –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏
            # –î–ª—è –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—ñ–≤ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–µ–∂–∏–º —Ñ—ñ–ª—å–º—ñ–≤
            # —ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤ –ø–æ–¥–∞–ª—å—à–æ–º—É
            media_type = MOVIE
        else:
            media_type = MOVIE  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∂–∞–Ω—Ä–∏ –∑ API
        api_genres = await get_genres(media_type)
        
        if api_genres and "genres" in api_genres:
            for genre in api_genres["genres"]:
                # –î–æ–¥–∞—î–º–æ –∂–∞–Ω—Ä–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                db.add_genre(genre["name"], genre["id"], category_id)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤
            genres = db.get_genres(category_id)
        
            # –î–ª—è –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—ñ–≤, –¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ–¥–∞–º–æ –∂–∞–Ω—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            if category_id == 3 and api_genres["genres"]:
                # ID –¥–ª—è –∂–∞–Ω—Ä—É –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤ TMDB API
                animation_genre_id = 16  # "Animation" –∂–∞–Ω—Ä —É TMDB
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —Ü–µ–π –∂–∞–Ω—Ä —É –±–∞–∑—ñ
                has_animation_genre = False
                for genre in genres:
                    if genre["api_id"] == animation_genre_id:
                        has_animation_genre = True
                        break
                
                # –Ø–∫—â–æ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
                if not has_animation_genre:
                    db.add_genre("–ê–Ω—ñ–º–∞—Ü—ñ—è", animation_genre_id, category_id)
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä—ñ–≤
                    genres = db.get_genres(category_id)
    
    if not genres:
        text = "–ù–∞ –∂–∞–ª—å, –∂–∞–Ω—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        markup = categories_inline_keyboard(db.get_categories())
    else:
        text = "–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:"
        markup = genres_inline_keyboard(genres, category_id)
    
    try:
        await callback_query.message.edit_text(text, reply_markup=markup)
    except exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ, —ñ–≥–Ω–æ—Ä—É—î–º–æ
            pass
        elif "message to edit not found" in str(e):
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
            await callback_query.message.answer(text, reply_markup=markup)
        else:
            # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–≤–∏–¥–∞—î–º–æ
            raise

@categories_router.callback_query(lambda c: c.data.startswith("genre_"))
async def callback_genre_selected(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∂–∞–Ω—Ä—É"""
    await callback_query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∂–∞–Ω—Ä—É —ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –¥–∞–Ω–∏—Ö callback_query
    _, genre_id, category_id = callback_query.data.split("_")
    genre_id = int(genre_id)
    category_id = int(category_id)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    if category_id == 1:  # –§—ñ–ª—å–º–∏
        media_type = MOVIE
    elif category_id == 2:  # –°–µ—Ä—ñ–∞–ª–∏
        media_type = TV
    elif category_id == 3:  # –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏
        media_type = MOVIE  # –ë—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∏–ø —Ñ—ñ–ª—å–º—ñ–≤ –¥–ª—è –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—ñ–≤
    else:
        media_type = MOVIE  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    # –û—Ç—Ä–∏–º—É—î–º–æ API_ID –¥–ª—è –∂–∞–Ω—Ä—É
    genres = db.get_genres(category_id)
    api_genre_id = None
    
    for genre in genres:
        if genre["id"] == genre_id:
            api_genre_id = genre["api_id"]
            break
    
    if not api_genre_id:
        text = "–ü–æ–º–∏–ª–∫–∞: –∂–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        markup = genres_inline_keyboard(genres, category_id)
        try:
            await callback_query.message.edit_text(text, reply_markup=markup)
        except exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            elif "message to edit not found" in str(e):
                await callback_query.message.answer(text, reply_markup=markup)
            else:
                raise
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å–º–∏/—Å–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º –∑ API
    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏" –¥–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ–π–Ω–∏–π –∂–∞–Ω—Ä —É –∑–∞–ø–∏—Ç
    if category_id == 3:  # –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º–∏
        animation_genre_id = 16  # ID –∂–∞–Ω—Ä—É "Animation" —É TMDB
        # –Ø–∫—â–æ –≤–∂–µ –æ–±—Ä–∞–Ω–∏–π –∂–∞–Ω—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó, –Ω–µ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä
        if api_genre_id != animation_genre_id:
            # –¢—É—Ç –º–∏ –≤–∫–∞–∑—É—î–º–æ –æ–±–∏–¥–≤–∞ –∂–∞–Ω—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É
            result = await discover_by_genre(media_type, f"{animation_genre_id},{api_genre_id}", page=1)
        else:
            result = await discover_by_genre(media_type, api_genre_id, page=1)
    else:
        result = await discover_by_genre(media_type, api_genre_id, page=1)
    
    if not result or "results" not in result or not result["results"]:
        text = "–ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—å–º—ñ–≤/—Å–µ—Ä—ñ–∞–ª—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–º –∂–∞–Ω—Ä–æ–º."
        markup = genres_inline_keyboard(genres, category_id)
        try:
            await callback_query.message.edit_text(text, reply_markup=markup)
        except exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            elif "message to edit not found" in str(e):
                await callback_query.message.answer(text, reply_markup=markup)
            else:
                raise
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ 1/{result['total_pages']}):\n\n"
    
    for i, item in enumerate(result["results"][:10], 1):
        title = item.get("title") or item.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
        release_date = item.get("release_date") or item.get("first_air_date", "")
        release_year = f" ({release_date[:4]})" if release_date else ""
        
        rating = item.get("vote_average", 0)
        rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
        
        text += f"{i}. <b>{title}</b>{release_year} {rating_stars}\n"
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = media_list_keyboard(
        page=1, 
        max_page=min(result["total_pages"], 1000), 
        media_type=media_type, 
        genre_id=api_genre_id if category_id != 3 else f"{animation_genre_id},{api_genre_id}" if api_genre_id != 16 else "16"
    )
    
    try:
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message to edit not found" in str(e):
            await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            raise

@categories_router.callback_query(lambda c: c.data == "back_to_categories")
async def callback_back_to_categories(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    await callback_query.answer()
    
    categories = db.get_categories()
    
    try:
        await callback_query.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=categories_inline_keyboard(categories)
        )
    except exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message to edit not found" in str(e):
            await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_inline_keyboard(categories))
        else:
            raise

@categories_router.callback_query(lambda c: c.data == "back_to_main")
async def callback_back_to_main(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback_query.answer()
    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    await callback_query.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

@categories_router.callback_query(lambda c: c.data.startswith("page_") and len(c.data.split("_")) > 2)
async def callback_page_navigation(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    await callback_query.answer()
    
    # –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ callback_query
    parts = callback_query.data.split("_")
    page = int(parts[1])
    
    media_type = None
    genre_id = None
    
    if len(parts) > 2:
        media_type = parts[2]
    
    if len(parts) > 3:
        genre_id = parts[3]  # –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ ID —á–µ—Ä–µ–∑ –∫–æ–º—É
    
    if not media_type or not genre_id:
        text = "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó."
        markup = None
        try:
            await callback_query.message.edit_text(text, reply_markup=markup)
        except exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            elif "message to edit not found" in str(e):
                await callback_query.message.answer(text)
            else:
                raise
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    result = await discover_by_genre(media_type, genre_id, page=page)
    
    if not result or "results" not in result or not result["results"]:
        text = "–ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—å–º—ñ–≤/—Å–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏."
        markup = None
        try:
            await callback_query.message.edit_text(text, reply_markup=markup)
        except exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            elif "message to edit not found" in str(e):
                await callback_query.message.answer(text)
            else:
                raise
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{result['total_pages']}):\n\n"
    
    for i, item in enumerate(result["results"][:10], 1):
        title = item.get("title") or item.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
        release_date = item.get("release_date") or item.get("first_air_date", "")
        release_year = f" ({release_date[:4]})" if release_date else ""
        
        rating = item.get("vote_average", 0)
        rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
        
        text += f"{i}. <b>{title}</b>{release_year} {rating_stars}\n"
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = media_list_keyboard(
        page=page, 
        max_page=min(result["total_pages"], 1000), 
        media_type=media_type, 
        genre_id=genre_id
    )
    
    try:
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message to edit not found" in str(e):
            await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            raise

@categories_router.callback_query(lambda c: c.data.startswith("back_to_genres_"))
async def callback_back_to_genres(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∂–∞–Ω—Ä—ñ–≤"""
    await callback_query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞ –∑ –¥–∞–Ω–∏—Ö callback_query
    media_type = callback_query.data.split("_")[-1]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ —Ç–∏–ø–æ–º –º–µ–¥—ñ–∞
    category_id = 1  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Ñ—ñ–ª—å–º–∏
    
    if media_type == TV:
        category_id = 2
    elif media_type == ANIMATION:
        category_id = 3
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∂–∞–Ω—Ä–∏ –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    genres = db.get_genres(category_id)
    
    try:
        await callback_query.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:",
            reply_markup=genres_inline_keyboard(genres, category_id)
        )
    except exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        elif "message to edit not found" in str(e):
            await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:", reply_markup=genres_inline_keyboard(genres, category_id))
        else:
            raise

def register_categories_handlers(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –∂–∞–Ω—Ä—ñ–≤"""
    dp.include_router(categories_router) 