from aiogram import types, Router, F
from aiogram.filters import Command
from utils import get_trending
from keyboards import media_list_keyboard
from utils.constants import *

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤
trending_router = Router()

@trending_router.message(Command(commands=[TRENDING_COMMAND]))
async def cmd_trending(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /trending"""
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫
    search_message = await message.answer("üîç –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —ñ —Å–µ—Ä—ñ–∞–ª–∏
    trending_result = await get_trending()
    
    if not trending_result or "results" not in trending_result or not trending_result["results"]:
        await search_message.edit_text("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏.")
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ 1/{trending_result['total_pages']}):</b>\n\n"
    
    for i, item in enumerate(trending_result["results"][:10], 1):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞
        media_type = item.get("media_type", "")
        media_icon = "üé¨" if media_type == "movie" else "üì∫" if media_type == "tv" else "üé≠"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É/—Å–µ—Ä—ñ–∞–ª—É
        title = item.get("title") or item.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –≤–∏–ø—É—Å–∫—É
        release_date = item.get("release_date") or item.get("first_air_date", "")
        release_year = f" ({release_date[:4]})" if release_date else ""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        rating = item.get("vote_average", 0)
        rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
        
        text += f"{i}. {media_icon} <b>{title}</b>{release_year} {rating_stars}\n"
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = media_list_keyboard(
        page=1, 
        max_page=min(trending_result["total_pages"], 1000)
    )
    
    await search_message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@trending_router.message(F.text == "üî• –ü–æ–ø—É–ª—è—Ä–Ω–µ")
async def text_trending(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤"""
    await cmd_trending(message)

@trending_router.callback_query(lambda c: c.data.startswith("page_") and len(c.data.split("_")) == 2)
async def callback_trending_page(callback_query: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö —Ç—Ä–µ–Ω–¥—ñ–≤"""
    await callback_query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    page = int(callback_query.data.split("_")[1])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    trending_result = await get_trending(page=page)
    
    if not trending_result or "results" not in trending_result or not trending_result["results"]:
        await callback_query.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.",
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{trending_result['total_pages']}):</b>\n\n"
    
    for i, item in enumerate(trending_result["results"][:10], 1):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞
        media_type = item.get("media_type", "")
        media_icon = "üé¨" if media_type == "movie" else "üì∫" if media_type == "tv" else "üé≠"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É/—Å–µ—Ä—ñ–∞–ª—É
        title = item.get("title") or item.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –≤–∏–ø—É—Å–∫—É
        release_date = item.get("release_date") or item.get("first_air_date", "")
        release_year = f" ({release_date[:4]})" if release_date else ""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
        rating = item.get("vote_average", 0)
        rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
        
        text += f"{i}. {media_icon} <b>{title}</b>{release_year} {rating_stars}\n"
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    keyboard = media_list_keyboard(
        page=page, 
        max_page=min(trending_result["total_pages"], 1000)
    )
    
    await callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

def register_trending_handlers(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤"""
    dp.include_router(trending_router) 