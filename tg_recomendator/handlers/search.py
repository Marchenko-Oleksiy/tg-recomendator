from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states import SearchStates
from utils import search_movie, search_tv
from keyboards import main_menu_keyboard, media_list_keyboard
from utils.constants import *
from keyboards.keyboards import cancel_keyboard

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ—à—É–∫—É
search_router = Router()

@search_router.message(Command(commands=[SEARCH_COMMAND]))
async def cmd_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /search"""
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –∞–±–æ —Å–µ—Ä—ñ–∞–ª—É –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=cancel_keyboard("cancel_search")
    )

@search_router.message(F.text == "üîç –ü–æ—à—É–∫")
async def text_search(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –ø–æ—à—É–∫—É"""
    await cmd_search(message, state)

@search_router.message(StateFilter(SearchStates.waiting_for_query))
async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    query = message.text.strip()
    
    if not query:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç.")
        return
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫
    search_message = await message.answer("üîç –®—É–∫–∞—î–º–æ...")
    
    # –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤
    movies_result = await search_movie(query)
    
    # –ü–æ—à—É–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤
    tv_result = await search_tv(query)
    
    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
    await state.clear()
    
    # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    movie_count = len(movies_result.get("results", [])) if movies_result else 0
    tv_count = len(tv_result.get("results", [])) if tv_result else 0
    
    if movie_count == 0 and tv_count == 0:
        await search_message.edit_text("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º: <b>{query}</b>\n\n"
    
    # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å–º–∏
    if movie_count > 0:
        text += "<b>üé¨ –§—ñ–ª—å–º–∏:</b>\n"
        for i, movie in enumerate(movies_result["results"][:5], 1):
            title = movie.get("title", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
            release_date = movie.get("release_date", "")
            release_year = f" ({release_date[:4]})" if release_date else ""
            
            rating = movie.get("vote_average", 0)
            rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
            
            text += f"{i}. <b>{title}</b>{release_year} {rating_stars}\n"
        
        if movie_count > 5:
            text += f"... —ñ —â–µ {movie_count - 5} —Ñ—ñ–ª—å–º—ñ–≤\n"
        
        text += "\n"
    
    # –î–æ–¥–∞—î–º–æ —Å–µ—Ä—ñ–∞–ª–∏
    if tv_count > 0:
        text += "<b>üì∫ –°–µ—Ä—ñ–∞–ª–∏:</b>\n"
        for i, tv in enumerate(tv_result["results"][:5], 1):
            title = tv.get("name", "–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞")
            first_air_date = tv.get("first_air_date", "")
            release_year = f" ({first_air_date[:4]})" if first_air_date else ""
            
            rating = tv.get("vote_average", 0)
            rating_stars = "‚≠ê" * int(rating / 2) if rating else ""
            
            text += f"{i}. <b>{title}</b>{release_year} {rating_stars}\n"
        
        if tv_count > 5:
            text += f"... —ñ —â–µ {tv_count - 5} —Å–µ—Ä—ñ–∞–ª—ñ–≤\n"
    
    await search_message.edit_text(
        text,
        parse_mode="HTML"
    )

@search_router.callback_query(lambda c: c.data == "cancel_search")
async def callback_cancel_search(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É"""
    await callback_query.answer()
    await state.clear()
    await callback_query.message.edit_text("–ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

def register_search_handlers(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É"""
    dp.include_router(search_router) 